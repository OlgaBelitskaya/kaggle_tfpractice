# -*- coding: utf-8 -*-
"""tensorflow-practice-13.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QcdWAzFqt7YMiOKq4mR9hTieM13T6hyE
"""

# Commented out IPython magic to ensure Python compatibility.
# %run ../input/python-recipes/radial_gradient_header.py
# %radial_gradient_header Code Modules & Helpful Functions

import warnings; warnings.filterwarnings('ignore')
import tensorflow as tf,tensorflow_hub as hub
import numpy as np,pylab as pl,PIL.Image
file_path='https://olgabelitskaya.gitlab.io/images/'

# Commented out IPython magic to ensure Python compatibility.
# %radial_gradient_header Image Data for Super Resolution

img_path=file_path+'04_001.png'
img_path=tf.keras.utils.get_file('04_001.png',img_path)

# Commented out IPython magic to ensure Python compatibility.
# %radial_gradient_header Model Loading

model=hub.load('https://tfhub.dev/captain-pool/esrgan-tf2/1')
func=model.signatures[tf.saved_model.DEFAULT_SERVING_SIGNATURE_DEF_KEY]
func.inputs[0].set_shape([1,50,50,3])
converter=tf.lite.TFLiteConverter.from_concrete_functions([func])
converter.optimizations=[tf.lite.Optimize.DEFAULT]
tflite_model=converter.convert()
with tf.io.gfile.GFile('ESRGAN.tflite','wb') as f:
    f.write(tflite_model)
esrgan_model_path='./ESRGAN.tflite'

# Commented out IPython magic to ensure Python compatibility.
# %radial_gradient_header ESRGAN Interpreter

lr=tf.io.read_file(img_path)
lr=tf.image.decode_jpeg(lr)
lr=tf.image.resize(lr,[50,50])
lr=tf.expand_dims(lr.numpy()[:,:,:3],axis=0)
lr=tf.cast(lr,tf.float32)
interpreter=tf.lite.Interpreter(model_path=esrgan_model_path)
interpreter.allocate_tensors()
input_details=interpreter.get_input_details()
output_details=interpreter.get_output_details()
interpreter.set_tensor(input_details[0]['index'],lr)
interpreter.invoke()
output_data=interpreter.get_tensor(output_details[0]['index'])
sr=tf.squeeze(output_data,axis=0)
sr=tf.clip_by_value(sr,0,255)
sr=tf.round(sr); sr=tf.cast(sr,tf.uint8)

# Commented out IPython magic to ensure Python compatibility.
# %radial_gradient_header Super Resolution

lr=tf.cast(tf.squeeze(lr,axis=int(0)),tf.uint8)
pl.figure(figsize=(8,4));pl.title('LR')
pl.imshow(lr.numpy()); pl.show(); print()
pl.figure(figsize=(8,4))
pl.subplot(1,2,1); pl.title(f'ESRGAN (x4)')
pl.imshow(sr.numpy());
bicubic=tf.image.resize(
    lr,[200,200],tf.image.ResizeMethod.BICUBIC)
bicubic=tf.cast(bicubic, tf.uint8)
pl.subplot(1,2,2); pl.title('Bicubic')
pl.imshow(bicubic.numpy())
pl.tight_layout(); pl.show()